// Generated by CoffeeScript 1.6.2
(function() {
  describe("Communications with SOAP Proxy", function() {
    var randomArrayOfAPIs, testObject, users;

    randomArrayOfAPIs = ['getVersion', 'listApi', 'generateSSLCSR', 'deleteProxyConfig', 'pvm_setCACert'];
    testObject = new Object();
    users = new Array();
    testObject = new PVMAjax('https', '192.168.92.146', 'soap', '8080', {
      protocol: 'http:',
      host: 'localhost:8000'
    });
    testObject.username('admin');
    testObject.password('admin1');
    testObject.host.host = 'localhost:8000';
    testObject.host.protocol = 'http:';
    testObject.login();
    it("successfully logs in and populates methods", function(done) {
      var interval;

      interval = setInterval(function() {
        var m, _i, _len;

        if (Object.keys(testObject.methods).length > 0) {
          for (_i = 0, _len = randomArrayOfAPIs.length; _i < _len; _i++) {
            m = randomArrayOfAPIs[_i];
            expect(testObject.methods[m]).not.toBe(void 0);
          }
          clearInterval(interval);
          return done();
        }
      }, 300);
      return setTimeout(function() {
        clearInterval(interval);
        return done();
      }, 5000);
    });
    it("calls listUsers (which takes no params)", function(done) {
      var interval, test;

      test = testObject.methods.listUsers;
      test.host.host = 'localhost:8000';
      test.call();
      interval = setInterval(function() {
        if (test.resultState() === 0) {
          expect(test.resultMessage()).toBe("");
          users = test.resultValue();
          clearInterval(interval);
          return done();
        }
      }, 300);
      return setTimeout(function() {
        clearInterval(interval);
        return done();
      }, 5000);
    });
    it("calls getUserScope on an existing user", function(done) {
      var interval, test;

      test = testObject.methods.getUserScope;
      test.host.host = 'localhost:8000';
      test.call(users[0]);
      interval = setInterval(function() {
        if (test.resultState() === 0) {
          expect(test.result()).not.toBe("");
          clearInterval(interval);
          return done();
        }
      }, 300);
      return setTimeout(function() {
        clearInterval(interval);
        return done();
      }, 5000);
    });
    return it("gets an error on getUserScope with a bogus user", function(done) {
      var interval, test;

      test = testObject.methods.getUserScope;
      test.pvmError = function() {
        return null;
      };
      test.host.host = 'localhost:8000';
      test.call('wanglebangledanglefoobar');
      interval = setInterval(function() {
        if (test.resultState() > 0) {
          expect(test.resultState()).not.toBe(0);
          clearInterval(interval);
          return done();
        }
      }, 300);
      return setTimeout(function() {
        clearInterval(interval);
        return done();
      }, 5000);
    });
  });

}).call(this);

/*
//@ sourceMappingURL=jsToSoapProxyCommsTestSpec.map
*/
