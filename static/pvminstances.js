// Generated by CoffeeScript 1.6.2
(function() {
  var Clouds, Instances, Regions,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ko.components.register('clouds', {
    viewModel: Clouds = (function() {
      function Clouds() {
        this.clouds = {};
        this.cloudsIndex = ko.observableArray();
        this.regionsIndex = ko.observableArray();
        this.init();
      }

      Clouds.prototype.getClouds = function() {
        var loadList,
          _this = this;

        loadList = function(r) {
          var index;

          _this.clouds = r;
          index = Object.keys(_this.clouds);
          return _this.cloudsIndex(index);
        };
        return pvm.methods.listSupportedClouds.call(loadList);
      };

      Clouds.prototype.init = function() {
        return this.getClouds();
      };

      return Clouds;

    })(),
    template: {
      require: "/static/requirejs/text.js!views?template=clouds"
    }
  });

  ko.components.register('regions', {
    viewModel: Regions = (function() {
      function Regions(params) {
        this.params = params;
        this.getRegions = __bind(this.getRegions, this);
        this.regions = {};
        this.regionsIndex = this.params.regionsIndex;
        this.init();
      }

      Regions.prototype.getRegions = function() {
        var loadList,
          _this = this;

        loadList = function(r) {
          _this.regions = r.region;
          return _this.regionsIndex(_this.regions.values);
        };
        return pvm.methods.getCloudParams.call([this.params.cloud, 'listInstances'], loadList);
      };

      Regions.prototype.init = function() {
        return this.getRegions();
      };

      return Regions;

    })(),
    template: {
      require: "/static/requirejs/text.js!views?template=regions"
    }
  });

  ko.components.register('instances', {
    viewModel: Instances = (function() {
      var Instance;

      function Instances(params) {
        var _this = this;

        this.cloud = params.cloud;
        this.groupsIndex = ko.observable().subscribeTo('groupsIndex');
        this.regions = params.regions;
        this.protectedInstancesIndex = new Object();
        this.instances = ko.observableArray();
        this.filterValue = ko.observable('');
        this.filteredGroup = ko.observable('');
        this.filterProtected = ko.observable('');
        this.groupsOptions = ko.computed(function() {
          return ['all Groups'].concat(_this.groupsIndex());
        });
        this.updateInstances = ko.computed(function() {
          var loadRegionInstances, region, _i, _len, _ref, _results;

          loadRegionInstances = function(region) {
            return pvm.methods.listInstances.call([
              _this.cloud, {
                region: region
              }
            ], function(list) {
              var obj, tempArray, _i, _len, _ref;

              tempArray = _this.instances();
              _ref = Object.keys(list);
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                obj = _ref[_i];
                tempArray.push(new Instance(list[obj], obj, region));
              }
              return _this.instances(tempArray);
            });
          };
          _ref = _this.regions();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            region = _ref[_i];
            _results.push(loadRegionInstances(region));
          }
          return _results;
        });
        this.items = ko.computed(function() {
          var match;

          match = function(obj) {
            var isGroupFiltered, isTextFiltered, testForProtected;

            isTextFiltered = function() {
              var s;

              s = _this.filterValue().toLowerCase();
              if (s !== "") {
                return obj.instance.search.toLowerCase().indexOf(s) >= 0;
              } else {
                return true;
              }
            };
            isGroupFiltered = function() {
              if (_this.filteredGroup() === "all Groups") {
                return true;
              } else {
                return _this.groupsIndex()[_this.filteredGroup().toString()].indexOf(obj.name) >= 0;
              }
            };
            testForProtected = function() {
              switch (_this.filterProtected()) {
                case 'protected':
                  return _this.protectedInstancesIndex.indexOf(obj.name) >= 0;
                case 'unprotected':
                  return _this.protectedInstancesIndex.indexOf(obj.name) === -1;
                default:
                  return true;
              }
            };
            return isGroupFiltered() && isTextFiltered() && testForProtected();
          };
          return _this.instances().filter(match);
        });
        this.init();
      }

      Instances.prototype.getAllProtectedInstances = function() {
        var _this = this;

        return pvm.methods.listProtectedInstances.call(function(list) {
          return _this.protectedInstancesIndex = list;
        });
      };

      Instances.prototype.init = function() {
        return this.getAllProtectedInstances();
      };

      Instance = (function() {
        function Instance(details, name, region) {
          this.details = details;
          this.name = name;
          this.region = region;
          this.instance = new Object;
          this.init();
        }

        Instance.prototype.unwrapDetails = function(details) {
          var item, object, searchString, temp, _i, _j, _len, _len1, _ref;

          temp = new Object();
          searchString = new String();
          for (_i = 0, _len = details.length; _i < _len; _i++) {
            item = details[_i];
            temp[item.name] = item.value;
          }
          _ref = temp.tags;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            object = _ref[_j];
            searchString = searchString + " " + object[Object.keys(object)[0]];
          }
          searchString = searchString + " " + temp.platform + " " + temp.FQN + " " + temp.URStatus + " " + temp.state;
          temp.search = searchString;
          return temp;
        };

        Instance.prototype.init = function() {
          this.instance.name = this.name;
          this.instance.region = this.region;
          return $.extend(this.instance, this.unwrapDetails(this.details));
        };

        return Instance;

      })();

      return Instances;

    })(),
    template: {
      require: "/static/requirejs/text.js!views?template=instances"
    }
  });

}).call(this);

/*
//@ sourceMappingURL=pvminstances.map
*/
