// Generated by CoffeeScript 1.6.2
(function() {
  var PVMUsers, User,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ko.components.register('users', {
    viewModel: PVMUsers = (function() {
      function PVMUsers() {
        this.deleteUser = __bind(this.deleteUser, this);
        this.init = __bind(this.init, this);        this.users = ko.observableArray([]);
        this.allRoles = ko.observableArray([]);
        this.allGroups = ko.observableArray([]);
        this.init();
      }

      PVMUsers.prototype.getAllRoles = function() {
        var _this = this;

        this.allRoles([]);
        return pvm.methods.listRoles.call(function(r) {
          return _this.allRoles(r);
        });
      };

      PVMUsers.prototype.getAllGroups = function() {
        var _this = this;

        return pvm.methods.listInstanceGroups.call(function(r) {
          var allGroups, arr, name, _i, _len;

          arr = Object.keys(r);
          allGroups = new Array();
          for (_i = 0, _len = arr.length; _i < _len; _i++) {
            name = arr[_i];
            allGroups.push({
              name: name,
              details: r[name]
            });
          }
          return _this.allGroups(allGroups);
        });
      };

      PVMUsers.prototype.init = function() {
        var refreshUsers,
          _this = this;

        refreshUsers = function(r) {
          return _this.users(r);
        };
        pvm.methods.listUsers.call(refreshUsers);
        this.getAllGroups();
        return this.getAllRoles();
      };

      PVMUsers.prototype.deleteUser = function(name) {
        return pvm.methods.deleteUser.call(name, this.init);
      };

      PVMUsers.prototype.addUser = function(form) {
        return pvm.methods.addUser.call([form.username.value, form.password.value, form.role.value], this.init);
      };

      return PVMUsers;

    })(),
    template: {
      require: "/static/requirejs/text.js!views?template=users"
    }
  });

  ko.components.register('user', {
    viewModel: User = (function() {
      function User(params) {
        this.removeFromScope = __bind(this.removeFromScope, this);
        this.addToScope = __bind(this.addToScope, this);
        this.init = __bind(this.init, this);
        this.getUserRole = __bind(this.getUserRole, this);
        this.getUserScope = __bind(this.getUserScope, this);
        var _this = this;

        this.name = ko.observable(params.name);
        this.scope = ko.observable(new Object());
        this.role = ko.observable();
        this.allGroups = params.allGroups;
        this.assignedGroups = ko.computed(function() {
          var arr, group, role, _i, _j, _len, _len1, _ref, _ref1;

          arr = new Array();
          _ref = Object.keys(_this.scope());
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            role = _ref[_i];
            _ref1 = _this.scope()[role];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              group = _ref1[_j];
              arr.push(group);
            }
          }
          return arr;
        });
        this.unassignedGroups = ko.computed(function() {
          var arr, item, _i, _len, _ref;

          arr = new Array();
          _ref = _this.allGroups();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            arr.push(item.name);
          }
          return arr.filter(function(i) {
            return _this.assignedGroups().indexOf(i) < 0;
          });
        });
        this.scopeView = ko.computed(function() {
          var arr, role, roles, _i, _len;

          arr = new Array();
          roles = Object.keys(_this.scope());
          for (_i = 0, _len = roles.length; _i < _len; _i++) {
            role = roles[_i];
            arr.push({
              role: role,
              groups: _this.scope()[role]
            });
          }
          return arr;
        });
        this.init();
      }

      User.prototype.getUserScope = function() {
        var _this = this;

        return pvm.methods.getUserScope.call(this.name(), function(r) {
          return _this.scope(r);
        });
      };

      User.prototype.getUserRole = function() {
        var _this = this;

        return pvm.methods.getUserRole.call(this.name(), function(r) {
          return _this.role(r);
        });
      };

      User.prototype.init = function() {
        this.getUserScope();
        return this.getUserRole();
      };

      User.prototype.addToScope = function(parentObj, thisGroup) {
        this.scope()[parentObj.role].push(thisGroup);
        return pvm.methods.updateUserScope.call([this.name(), this.scope()], this.getUserScope);
      };

      User.prototype.removeFromScope = function(thisRole, thisGroup) {
        var index;

        index = this.scope()[thisRole].indexOf(thisGroup);
        if (index > -1) {
          this.scope()[thisRole].splice(index, 1);
        }
        return pvm.methods.updateUserScope.call([this.name(), this.scope()], this.getUserScope);
      };

      return User;

    })(),
    template: {
      require: "/static/requirejs/text.js!views?template=user"
    }
  });

}).call(this);

/*
//@ sourceMappingURL=pvmusers.map
*/
