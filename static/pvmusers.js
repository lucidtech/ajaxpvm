// Generated by CoffeeScript 1.6.2
(function() {
  var PVMUsers,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ko.components.register('users', {
    viewModel: PVMUsers = (function() {
      function PVMUsers() {
        this.deleteUser = __bind(this.deleteUser, this);
        this.init = __bind(this.init, this);        this.names = ko.observableArray();
        this.roles = ko.observableArray();
        this.groups = ko.observableArray();
        this.allRoles = ko.observableArray();
        this.init();
      }

      PVMUsers.prototype.getRoleFor = function(name) {
        var _this = this;

        return pvm.methods.getUserRole.call(name, function(r) {
          return _this.roles.push({
            name: name,
            role: r[2]
          });
        });
      };

      PVMUsers.prototype.getGroupsFor = function(name) {
        var _this = this;

        return pvm.methods.getUserScope.call(name, function(r) {
          var add, ro, tempArray;

          tempArray = new Array();
          add = function(item) {
            if (item.groups.length > 0) {
              return tempArray.push(item);
            }
          };
          for (ro in r[2]) {
            add({
              role: ro,
              groups: r[2][ro]
            });
          }
          return _this.groups.push({
            name: name,
            scope: tempArray
          });
        });
      };

      PVMUsers.prototype.getAllRoles = function() {
        var _this = this;

        return pvm.methods.listRoles.call(function(r) {
          return _this.allRoles(r[2]);
        });
      };

      PVMUsers.prototype.init = function() {
        var refreshView,
          _this = this;

        refreshView = function(data) {
          var name, _i, _len, _ref, _results;

          if (data[0] === 0) {
            _this.names(data[2]);
            _ref = _this.names();
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              name = _ref[_i];
              _this.getGroupsFor(name);
              _this.getRoleFor(name);
              _results.push(_this.getAllRoles());
            }
            return _results;
          }
        };
        return pvm.methods.listUsers.call(refreshView);
      };

      PVMUsers.prototype.deleteUser = function(object) {
        return pvm.methods.deleteUser.call(object.name, this.init);
      };

      PVMUsers.prototype.addUser = function(form) {
        return pvm.methods.addUser.call([form.username.value, form.password.value, form.role.value]);
      };

      return PVMUsers;

    })(),
    template: {
      require: "/static/requirejs/text.js!views?template=users"
    }
  });

}).call(this);

/*
//@ sourceMappingURL=pvmusers.map
*/
