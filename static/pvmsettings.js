// Generated by CoffeeScript 1.6.2
(function() {
  var Networking, PVMSettings, cloudCredentials,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ko.components.register('settings', {
    viewModel: PVMSettings = (function() {
      function PVMSettings() {
        this.init = __bind(this.init, this);        this.cloudCredentials = ko.observable(new Object());
        this.networking = ko.observable(new Object());
        this.keyManager = ko.observable(new Object());
        this.syslog = ko.observable(new Object());
        this.ha = ko.observable(new Object());
        this.snmp = ko.observable(new Object());
        this.unattendedReboot = ko.observable(new Object());
        this.eventPurge = ko.observable(new Object());
        this.physicalServer = ko.observable(new Object());
        this.exportSettings = ko.observable(new Object());
        this.shutDown = ko.observable(new Object());
        this.init();
      }

      PVMSettings.prototype.init = function() {};

      return PVMSettings;

    })(),
    template: {
      require: "/static/requirejs/text.js!views?template=settings"
    }
  });

  ko.components.register('cloudcredentials', {
    viewModel: cloudCredentials = (function() {
      function cloudCredentials(params) {
        this.init = __bind(this.init, this);
        var _this = this;

        this.cloudCredentials = params.cloudcredentials;
        this.cloudName = ko.computed(function() {
          return Object.keys(_this.cloudCredentials())[0];
        });
        this.username = ko.computed(function() {
          if (_this.cloudName() != null) {
            return _this.cloudCredentials()[_this.cloudName()].username;
          }
        });
        this.server = ko.computed(function() {
          if (_this.cloudName() != null) {
            return _this.cloudCredentials()[_this.cloudName()].server;
          }
        });
        this.init();
      }

      cloudCredentials.prototype.init = function() {
        var refresh,
          _this = this;

        refresh = function(r) {
          return _this.cloudCredentials(r);
        };
        return pvm.methods.listCloudCredentials.call(refresh);
      };

      return cloudCredentials;

    })(),
    template: {
      require: "/static/requirejs/text.js!views?template=settings/cloudcredentials"
    }
  });

  ko.components.register('networking', {
    viewModel: Networking = (function() {
      function Networking(params) {
        this.init = __bind(this.init, this);
        var _this = this;

        this.networking = params.networking;
        this.dns = ko.observable();
        this.interfaces = ko.observableArray();
        this.routes = ko.observableArray();
        this.pvmIps = ko.observableArray();
        this.updateNetworking = ko.computed(function() {
          return _this.networking({
            dns: _this.dns,
            interfaces: _this.interfaces,
            routes: _this.routes,
            pvmIps: _this.pvmIps
          });
        });
        this.init();
      }

      Networking.prototype.init = function() {
        var dns, getInterface, getPvmIp, getRoutes,
          _this = this;

        dns = function(r) {
          return _this.dns(r);
        };
        pvm.methods.listDNS.call(dns);
        getInterface = function(interfaceList) {
          var iface, pushInterface, _i, _len, _results;

          _results = [];
          for (_i = 0, _len = interfaceList.length; _i < _len; _i++) {
            iface = interfaceList[_i];
            pushInterface = function(r) {
              return _this.interfaces.push({
                "interface": iface,
                details: r
              });
            };
            _results.push(pvm.methods.getNetworkInterfaceInfo.call(iface, pushInterface));
          }
          return _results;
        };
        pvm.methods.listNetworkInterfaces.call(getInterface);
        getRoutes = function(routeList) {
          return _this.routes(routeList);
        };
        pvm.methods.listNetworkRoutes.call();
        pvm.methods.listNetworkRoutes.call(getRoutes);
        getPvmIp = function(ipList) {
          return _this.pvmIps(ipList);
        };
        return pvm.methods.pvm_getAddress.call(getPvmIp);
      };

      return Networking;

    })(),
    template: {
      require: "/static/requirejs/text.js!views?template=settings/networking"
    }
  });

}).call(this);

/*
//@ sourceMappingURL=pvmsettings.map
*/
