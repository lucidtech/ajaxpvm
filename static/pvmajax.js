// Generated by CoffeeScript 1.6.2
(function() {
  var PVMAjax;

  PVMAjax = (function() {
    var host;

    host = {
      protocol: window.location.protocol,
      host: window.location.host,
      route: "pvm",
      port: "8080"
    };

    function PVMAjax(pvmProtocol, pvmURL, pvmRoute, pvmPort) {
      this.pvmProtocol = pvmProtocol;
      this.pvmURL = pvmURL;
      this.pvmRoute = pvmRoute;
      this.pvmPort = pvmPort;
      this.username = ko.observable('');
      this.password = ko.observable('');
      this.methodNames = ko.observableArray();
      this.methods = new Object();
      this.descriptions = new Object();
    }

    PVMAjax.prototype.successFunction = function(r) {
      console.log('success');
      return console.log(r);
    };

    PVMAjax.prototype.errorFunction = function(r) {
      console.log('error');
      return console.log(r);
    };

    PVMAjax.prototype.login = function() {
      var _this = this;

      return $.ajax({
        dataType: 'json',
        url: window.location.protocol + '//' + window.location.host + '/init',
        data: {
          username: this.username(),
          password: this.password(),
          protocol: this.pvmProtocol,
          host: this.pvmURL,
          route: this.pvmRoute,
          port: this.pvmPort
        },
        success: function() {
          _this.getMethods();
          return _this.loadDescriptions();
        }
      });
    };

    PVMAjax.prototype.bindDescriptions = function() {
      var m, _i, _len, _ref, _results;

      if (Object.keys(this.descriptions).length !== 0 && this.methodNames().length !== 0) {
        _ref = this.methodNames();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          m = _ref[_i];
          _results.push(this.methods[m].description(this.descriptions[m].split('\n')));
        }
        return _results;
      }
    };

    PVMAjax.prototype.getMethods = function(success, error) {
      var _this = this;

      if (!error) {
        error = this.errorFunction;
      }
      if (!success) {
        success = this.successFunction;
      }
      return $.ajax({
        dataType: 'json',
        url: window.location.protocol + '//' + window.location.host + '/methods',
        success: function(r) {
          var m, _i, _len;

          for (_i = 0, _len = r.length; _i < _len; _i++) {
            m = r[_i];
            _this.methods[m.method] = new SOAPMethod(m);
          }
          _this.methodNames(Object.keys(_this.methods));
          _this.bindDescriptions();
          return success(r);
        },
        error: error
      });
    };

    PVMAjax.prototype.loadDescriptions = function() {
      var _this = this;

      return $.ajax({
        dataType: 'json',
        url: window.location.protocol + '//' + window.location.host + '/pvm',
        data: {
          method: 'listApi',
          params: {}
        },
        success: function(r) {
          _this.descriptions = r[2];
          return _this.bindDescriptions();
        },
        error: this.error
      });
    };

    return PVMAjax;

  })();

  window.PVMAjax = PVMAjax;

}).call(this);

/*
//@ sourceMappingURL=pvmajax.map
*/
