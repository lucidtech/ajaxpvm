// Generated by CoffeeScript 1.6.2
(function() {
  var Syslog,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ko.components.register('syslog', {
    viewModel: Syslog = (function() {
      function Syslog() {
        this.init = __bind(this.init, this);
        this.deleteJob = __bind(this.deleteJob, this);
        this.addJob = __bind(this.addJob, this);
        this.getPurgeJobInfo = __bind(this.getPurgeJobInfo, this);
        this.setSyslogServerInfo = __bind(this.setSyslogServerInfo, this);
        this.getSyslogServerInfo = __bind(this.getSyslogServerInfo, this);
        var _i, _j, _results, _results1,
          _this = this;

        this.ip1 = ko.observable();
        this.port1 = ko.observable();
        this.ip2 = ko.observable();
        this.port2 = ko.observable();
        this.forwarding = ko.observable();
        this.unsetInfo = true;
        this.dirtyInfo = ko.pureComputed(function() {
          _this.ip1();
          _this.port1();
          _this.ip2();
          _this.port2();
          _this.forwarding();
          if (_this.unsetInfo) {
            return false;
          } else {
            return true;
          }
        });
        this.logPurgeJobs = ko.observableArray(new Array());
        this.newPurgeJob = {
          category: ko.observable(),
          tillday: ko.observable(),
          freq: ko.observable(),
          day: ko.observable(),
          hour: ko.observable(),
          minute: ko.observable()
        };
        this.newPurgeJobOptions = {
          category: ['all', 'debug', 'audit', 'system', 'external'],
          tillday: [1, 7, 30, 60, 90, 365],
          freq: ['monthly', 'weekly', 'daily'],
          day: {
            weekly: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
            monthly: (function() {
              _results = [];
              for (_i = 1; _i <= 31; _i++){ _results.push(_i); }
              return _results;
            }).apply(this)
          },
          hour: (function() {
            _results1 = [];
            for (_j = 0; _j <= 23; _j++){ _results1.push(_j); }
            return _results1;
          }).apply(this),
          minute: ['00', '15', '30', '45']
        };
        this.init();
      }

      Syslog.prototype.formatCategory = function(category, age) {
        var ageDays;

        ageDays = function(age) {
          if (age === 1) {
            return age + " day";
          } else {
            return age + " days";
          }
        };
        return "Purge " + category.toLowerCase() + " events older than " + ageDays(age);
      };

      Syslog.prototype.formatMinute = function(minute) {
        var minuteString;

        minuteString = minute.toString();
        if (minuteString.length === 1) {
          return '0' + minuteString;
        } else {
          return minuteString;
        }
      };

      Syslog.prototype.formatFrequency = function(period, day) {
        var dayOfMonth, dayOfWeek;

        dayOfWeek = function(day) {
          switch (day) {
            case 6:
              return "Sunday";
            case 0:
              return "Monday";
            case 1:
              return "Tuesday";
            case 2:
              return "Wednesday";
            case 3:
              return "Thursday";
            case 4:
              return "Friday";
            case 5:
              return "Saturday";
          }
        };
        dayOfMonth = function(day) {
          var floor;

          floor = Math.floor(((day / 10) - Math.floor(day / 10) + 0.01) * 10);
          if ((day > 10) && (day < 20)) {
            return day.toString() + "th";
          } else {
            switch (floor) {
              case 1:
                return day.toString() + "st";
              case 2:
                return day.toString() + "nd";
              case 3:
                return day.toString() + "rd";
              default:
                return day.toString() + "th";
            }
          }
        };
        switch (period.toLowerCase()) {
          case "weekly":
            return "weekly on a " + dayOfWeek(day);
          case "monthly":
            return "monthly on the " + dayOfMonth(day);
          case "daily":
            return "every day";
        }
      };

      Syslog.prototype.getSyslogServerInfo = function() {
        var map,
          _this = this;

        map = function(r) {
          _this.ip1(r.ip1);
          _this.ip2(r.ip2);
          _this.port1(r.port1);
          _this.port2(r.port2);
          _this.forwarding(r.enabled === 'no' ? false : true);
          return _this.unsetInfo = false;
        };
        return pvm.methods.getSysLogServerInfo.call(map);
      };

      Syslog.prototype.setSyslogServerInfo = function() {
        var refresh,
          _this = this;

        refresh = function() {
          if (_this.forwarding()) {
            return pvm.methods.enableSyslogForwarding.call(_this.getSyslogServerInfo);
          } else {
            return pvm.methods.disableSyslogForwarding.call(_this.getSyslogServerInfo);
          }
        };
        return pvm.methods.updateSyslogServer.call([this.ip1(), this.port1(), this.ip2(), this.port2()], refresh);
      };

      Syslog.prototype.getPurgeJobInfo = function() {
        var map,
          _this = this;

        map = function(r) {
          var job, tempArry, _i, _len, _ref;

          tempArry = new Array();
          _ref = Object.keys(r);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            job = _ref[_i];
            tempArry.push(r[job]);
          }
          return _this.logPurgeJobs(tempArry);
        };
        return pvm.methods.listClearLogJobs.call(map);
      };

      Syslog.prototype.addJob = function() {
        var days,
          _this = this;

        days = function() {
          if (_this.newPurgeJob.freq() === 'weekly') {
            return _this.newPurgeJobOptions.day.weekly.indexOf(_this.newPurgeJob.day());
          } else {
            if (_this.newPurgeJob.freq() === 'daily') {
              return 0;
            } else {
              return _this.newPurgeJob.day();
            }
          }
        };
        return pvm.methods.scheduleClearLogJob.call([this.newPurgeJob.freq(), days(), this.newPurgeJob.hour(), parseInt(this.newPurgeJob.minute()), this.newPurgeJob.category(), this.newPurgeJob.tillday()], this.getPurgeJobInfo);
      };

      Syslog.prototype.deleteJob = function(item) {
        var _this = this;

        return pvm.methods.cancelClearLogJob.call([[item.id]], function() {
          return _this.logPurgeJobs.remove(item);
        });
      };

      Syslog.prototype.init = function() {
        this.getSyslogServerInfo();
        return this.getPurgeJobInfo();
      };

      return Syslog;

    })(),
    template: {
      require: "/static/requirejs/text.js!views?template=settings/syslog/syslog"
    }
  });

}).call(this);

/*
//@ sourceMappingURL=syslog.map
*/
