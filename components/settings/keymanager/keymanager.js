// Generated by CoffeeScript 1.6.2
(function() {
  var KeyManager,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ko.components.register('keymanager', {
    viewModel: KeyManager = (function() {
      function KeyManager() {
        this.init = __bind(this.init, this);
        this.keyManagerProperties = __bind(this.keyManagerProperties, this);
        this.keyManagerCredentials = __bind(this.keyManagerCredentials, this);
        this.updateProperties = __bind(this.updateProperties, this);
        this.updateCredentials = __bind(this.updateCredentials, this);
        var _this = this;

        this.userName = ko.observable();
        this.password = ko.observable();
        this.ipAddress = ko.observable();
        this.port = ko.observable();
        this.protocol = ko.observable();
        this.certificate = ko.observable();
        this.unsetCredentials = true;
        this.dirtyCredentials = ko.pureComputed(function() {
          _this.userName();
          _this.password();
          if (_this.unsetCredentials) {
            return false;
          } else {
            return true;
          }
        });
        this.unsetProperties = true;
        this.dirtyProperties = ko.pureComputed(function() {
          _this.certificate();
          _this.ipAddress();
          _this.port();
          _this.protocol();
          if (_this.unsetProperties) {
            return false;
          } else {
            return true;
          }
        });
        this.init();
      }

      KeyManager.prototype.updateCredentials = function() {
        return pvm.methods.setKeySecureCredentials.call([this.userName(), this.password()], this.keyManagerCredentials);
      };

      KeyManager.prototype.updateProperties = function() {
        return pvm.methods.setKeySecureProperties.call({
          NAE_IP: this.ipAddress(),
          NAE_Port: this.nport(),
          Protocol: this.protocol()
        }, this.keyManagerCredentials);
      };

      KeyManager.prototype.keyManagerCredentials = function() {
        var keyManagerCreds,
          _this = this;

        keyManagerCreds = function(r) {
          _this.userName(r);
          return _this.unsetCredentials = false;
        };
        return pvm.methods.getKeySecureCredentials.call(keyManagerCreds);
      };

      KeyManager.prototype.keyManagerProperties = function() {
        var keyManager,
          _this = this;

        keyManager = function(r) {
          _this.ipAddress(r.NAE_IP);
          _this.port(r.NAE_Port);
          _this.protocol(r.Protocol);
          _this.certificate(r.CA_Cert);
          return _this.unsetProperties = false;
        };
        return pvm.methods.getKeySecureProperties.call(keyManager);
      };

      KeyManager.prototype.init = function() {
        this.keyManagerProperties();
        return this.keyManagerCredentials();
      };

      return KeyManager;

    })(),
    template: {
      require: "/static/requirejs/text.js!views?template=settings/keymanager/keymanager"
    }
  });

}).call(this);

/*
//@ sourceMappingURL=keymanager.map
*/
