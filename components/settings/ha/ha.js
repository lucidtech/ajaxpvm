// Generated by CoffeeScript 1.6.2
(function() {
  var HighAvailability,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ko.components.register('ha', {
    viewModel: HighAvailability = (function() {
      function HighAvailability() {
        this.init = __bind(this.init, this);
        this.startRefreshTimer = __bind(this.startRefreshTimer, this);
        this.updatePeer = __bind(this.updatePeer, this);
        this.setHAInfo = __bind(this.setHAInfo, this);
        this.getHAInfo = __bind(this.getHAInfo, this);
        var _this = this;

        this.active = ko.observable();
        this.master = ko.observable();
        this.instances = ko.observable();
        this.role = ko.pureComputed(function() {
          return this.instances().role;
        });
        this.status = ko.pureComputed(function() {
          return this.instances().statusStr;
        });
        this.statusRefreshTimer = new Object();
        this.retryCount = ko.observable();
        this.responseTimeoutSecs = ko.observable();
        this.periodSecs = ko.observable();
        this.virtualIp = ko.observable();
        this.peerInstanceId = ko.observable();
        this.peerHaPort = ko.observable();
        this.dirty = ko.computed(function() {
          _this.retryCount();
          _this.responseTimeoutSecs();
          _this.periodSecs();
          _this.virtualIp();
          if (ko.computedContext.isInitial()) {
            return false;
          } else {
            return true;
          }
        });
        this.init();
      }

      HighAvailability.prototype.getHAInfo = function() {
        var _this = this;

        pvm.methods.getHaConfig.call(function(config) {
          return _this.virtualIp(config.virtualIp);
        });
        pvm.methods.getHaHeartBeatConfig.call(function(config) {
          _this.retryCount(config.retryCount);
          _this.responseTimeoutSecs(config.responseTimeourtSecs);
          return _this.periodSecs(config.periodSecs);
        });
        return pvm.methods.getHaStatus.call(function(status) {
          _this.active(status.active);
          _this.master(status.master);
          return _this.instances(status.instances);
        });
      };

      HighAvailability.prototype.setHAInfo = function() {
        pvm.methods.configureHeartBeat.call([this.periodSecs(), this.responseTimeoutSecs(), this.retryCount()]);
        return pvm.methods.configureHaService.call(this.virtualIp());
      };

      HighAvailability.prototype.updatePeer = function() {
        if (this.peerInstanceId() === 'None') {

        } else {
          return pvm.methods.registerPeer.call([this.peerInstanceId(), this.peerHaPort()]);
        }
      };

      HighAvailability.prototype.startRefreshTimer = function() {
        var _this = this;

        return this.statusRefreshTimer = setInterval(function() {
          return _this.getHAInfo();
        }, 180000);
      };

      HighAvailability.prototype.init = function() {
        return this.startRefreshTimer();
      };

      return HighAvailability;

    })(),
    template: {
      require: "/static/requirejs/text.js!views?template=settings/ha/ha"
    }
  });

}).call(this);

/*
//@ sourceMappingURL=ha.map
*/
